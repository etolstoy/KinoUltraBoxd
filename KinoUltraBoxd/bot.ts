import { Telegraf, Context, Markup } from 'telegraf';
import { Message } from 'telegraf/typings/core/types/typegram';
import * as dotenv from 'dotenv';
import { downloadHtmlFiles } from './services/telegramFileService';
import { process as processFilms } from './services/filmProcessingService';
import { registerSelectionHandler } from './manualSelectionHandler';
import { BotSessionState } from './models/SessionModels';
import { sessionManager } from './services/sessionManager';
import { buildStatsReport } from './services/statsReportService';
import { generateLetterboxdCsv } from './services/letterboxdExportService';
import { FilmData } from './models/FilmData';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN as string);

bot.start((ctx: Context) => ctx.reply('üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –Ω–∞ Letterboxd. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ HTML-—Ñ–∞–π–ª—ã —Å —Ç–≤–æ–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø–∏—à–∏ /help!\n\n–ö–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—à—å —Ñ–∞–π–ª—ã –∏ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ –ù–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç". –ê –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏ @etolstoy!'));

// ---------------- Session & persistence layer ----------------
const loadState = (userId: number) => sessionManager.get(userId);
const saveState = (userId: number, state: BotSessionState) => sessionManager.set(userId, state);

// ---------------- Helper ----------------
async function sendStatsReport(ctx: Context, films: FilmData[]): Promise<void> {
  const report = buildStatsReport(films);
  await ctx.reply(report.message);
  if (report.notFoundFilms && report.notFoundFilms.length > 0) {
    const buffer = Buffer.from(report.notFoundFilms.join('\n'), 'utf-8');
    await ctx.replyWithDocument({ source: buffer, filename: 'not_found_films.txt' });
  }

  // Export CSV for Letterboxd
  if (report.stats.exportableCount > 0) {
    const csvBuffer = generateLetterboxdCsv(films);
    await ctx.replyWithDocument({ source: csvBuffer, filename: 'letterboxd.csv' });
  }
}

// Register manual selection handler
registerSelectionHandler(bot, sendStatsReport);

bot.on('document', async (ctx: Context) => {
  const doc = (ctx.message as Message.DocumentMessage).document;
  const userId = ctx.from?.id;
  if (!userId) return;

  // Show temporary status message
  const statusMsg = await ctx.reply('üì• –°–∫–∞—á–∏–≤–∞—é –∏ –ø—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª...');

  // Queue the file for this user (persisted)
  const session = await loadState(userId);
  session.fileQueue.file_ids.push(doc.file_id);
  session.fileQueue.file_names.push(doc.file_name || 'unnamed.html');
  await saveState(userId, session);
});

// Helper processing function reused in multiple places
async function processQueuedFiles(ctx: Context, session: BotSessionState): Promise<void> {
  const queue = session.fileQueue;
  if (!queue || queue.file_ids.length === 0) {
    await ctx.reply('‚ùå –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –∏—Ö –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â–µ —Ä–∞–∑.');
    return;
  }

  // Suppress noisy progress message ‚Äì keep chat concise while processing files

  let htmlContents: string[] = [];
  try {
    htmlContents = await downloadHtmlFiles(ctx.telegram, queue.file_ids);
  } catch (err) {
    console.error('[bot] file download failed', err);
    await ctx.reply('‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    return;
  }

  // ---------- Process downloaded HTML ----------
  try {
    const films = await processFilms(htmlContents, session.kinopoiskToken);

    // Identify films that need manual disambiguation
    const needManual = films
      .map((f, idx) => ({ film: f, idx }))
      .filter(({ film }) => film.potentialMatches && film.potentialMatches.length > 0);

    if (needManual.length === 0) {
      await sendStatsReport(ctx, films);
      await sessionManager.clearSelection(ctx.from!.id);
    } else {
      // Save state and start interactive selection
      // Inform user about auto-processed films vs those requiring manual disambiguation
      const processedCount = films.filter((f) => f.tmdbId != null || f.imdbId != null).length;
      const manualCount = films.filter((f) => f.type === 'film' && f.tmdbId == null && f.imdbId == null).length;
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üôã‚Äç‚ôÇÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_start')],
        [Markup.button.callback('üõë –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ', 'skip_all')],
      ]);

      await ctx.reply(
        `üëç –•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚Äì —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª ${processedCount} —Ñ–∏–ª—å–º–æ–≤, –∏ –æ–Ω–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É –Ω–∞ Letterboxd!\n\n–ù–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏ –∫ ${manualCount} —Ñ–∏–ª—å–º–æ–≤, –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`,
        keyboard,
      );

      session.selection = {
        films,
        selectionQueue: needManual.map(({ idx }) => idx),
        currentIdx: 0,
      };
      await saveState(ctx.from!.id, session);
    }

    // Success ‚Üí clear queue
    session.fileQueue = { file_ids: [], file_names: [] };
    await saveState(ctx.from!.id, session);
  } catch (err: any) {
    if (err instanceof Error && err.message === 'KIN_TOKEN_MISSING') {
      // Ask user for token and keep queue intact
      await ctx.reply('üôãüèª –ß–∞—Å—Ç—å —Ñ–∏–ª—å–º–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–∫–∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ –≤—Å–µ. –ù–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±–µ –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ ‚Äì –Ω–∞–ø–∏—à–∏ @kinopoiskdev_bot, –∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞ –º–∏–Ω—É—Ç—É —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç —É —Ç–µ–±—è. –ü—Ä–∏—à–ª–∏ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–¥–æ–ª–∂—É!');
      session.awaitingKinopoiskToken = true;
      await saveState(ctx.from!.id, session);
      return;
    }

    console.error('[bot] film processing failed', err);
    await ctx.reply('‚ùå –ö–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @etolstoy!');
  }
}

bot.hears(/^go$/i, async (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  const session = await loadState(userId);
  await processQueuedFiles(ctx, session);
});

// Capture Kinopoisk token when awaiting
bot.on('text', async (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  const session = await loadState(userId);
  if (!session.awaitingKinopoiskToken) return; // Not expecting token

  const token = (ctx.message as any).text?.trim();
  if (!token) return;

  session.kinopoiskToken = token;
  session.awaitingKinopoiskToken = false;
  await saveState(userId, session);

  await ctx.reply('üîê –û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ–∫–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤...');

  // Retry processing queue automatically
  await processQueuedFiles(ctx, session);
});

bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 